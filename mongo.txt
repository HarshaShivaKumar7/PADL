// MongoDB

// Restaurant Database
// Consider the following restaurant database with the following attributes - Name, address – (building, street, area, pincode), id, cuisine, nearby landmarks, online delivery- yes/no, famous for (name of the dish). Create 10 collections with data relevant to the following questions. Write and execute MongoDB queries:

db.crateCollections("restaurants");
db.restaurants.insertMany([
  {
    name: "Italian Delight",
    address: {
      building: "10",
      street: "MG Road",
      area: "Central Bangalore",
      pincode: 560001,
    },
    id: 1,
    cuisine: "Italian",
    nearby_landmarks: "MG Mall",
    online_delivery: "yes",
    famous_for: "Pasta",
  },
  {
    name: "Thali House",
    address: {
      building: "12",
      street: "Brigade Road",
      area: "Central Bangalore",
      pincode: 560002,
    },
    id: 2,
    cuisine: "North Indian",
    nearby_landmarks: "Brigade Tower",
    online_delivery: "no",
    famous_for: "North Indian Thali",
  },
  {
    name: "Spice Junction",
    address: {
      building: "15",
      street: "Church Street",
      area: "Central Bangalore",
      pincode: 560003,
    },
    id: 3,
    cuisine: "North Indian",
    nearby_landmarks: "Church Park",
    online_delivery: "yes",
    famous_for: "Butter Chicken",
  },
]);

// 1. List the name and address of all restaurants in Bangalore with Italian cuisine.

db.restaurants.find(
  { cuisine: "Italian", "address.area": "Central Bangalore" },
  { name: 1, address: 1, _id: 0 }
);

// 2. List the name, address and nearby landmarks of all restaurants in Bangalore where North Indian thali is available.

db.restaurants.find(
  {
    cuisine: "North Indian",
    famous_for: "North Indian Thali",
    "address.area": "Central Bangalore",
  },
  { name: 1, address: 1, nearby_landmarks: 1, _id: 0 }
);

// 3. List the name and address of restaurants and also the dish the restaurant is famous for, in Bangalore where online delivery is available.

db.restaurants.find(
  { "address.area": "Central Bangalore", online_delivery: "yes" },
  { name: 1, address: 1, famous_for: 1, _id: 0 }
);

// Tourist Places Database
// Consider the following Tourist places table with the following attributes - Place, address – (state), id, tourist attractions, best time of the year to visit, modes of transport (include nearest airport, railway station etc), accommodation, food - what not to miss for sure. Create 10 collections with data relevant to the following questions. Write and execute MongoDB queries:

db.createCollections("tourist_places");
db.tourist_places.insertMany([
  {
    id: 1,
    place: "Mysore Palace",
    address: { state: "Karnataka" },
    tourist_attractions: "Historical Monument",
    best_time_of_year: "October to March",
    modes_of_transport: {
      nearest_airport: "Mysore Airport",
      nearest_railway_station: "Mysore Junction",
    },
    accommodation: "Numerous Hotels",
    food: "South Indian Cuisine",
  },
  {
    id: 2,
    place: "Coorg",
    address: { state: "Karnataka" },
    tourist_attractions: "Coffee Plantations, Abbey Falls",
    best_time_of_year: "October to March",
    modes_of_transport: {
      nearest_airport: "Mangalore Airport",
      nearest_railway_station: "Mysore Junction",
    },
    accommodation: "Resorts and Homestays",
    food: "Coorgi Cuisine",
  },
  {
    id: 3,
    place: "Alleppey",
    address: { state: "Kerala" },
    tourist_attractions: "Backwaters, Houseboats",
    best_time_of_year: "November to February",
    modes_of_transport: {
      nearest_airport: "Cochin Airport",
      nearest_railway_station: "Alleppey Station",
    },
    accommodation: "Houseboats, Hotels",
    food: "Seafood",
  },
]);

// 1. List all the tourist places of Karnataka.
db.tourist_places.find({ "address.state": "Karnataka" }, { place: 1, _id: 0 });

// 2. List the tourist attractions of Kerala. Exclude accommodation and food.
db.tourist_places.find(
  { "address.state": "Kerala" },
  { tourist_attractions: 1, _id: 0 }
);

// 3. List the places sorted state wise.
db.tourist_places
  .find({}, { place: 1, "address.state": 1, _id: 0 })
  .sort({ "address.state": 1 });

// Movie Database
// Consider the following Movie table with the following attributes - Actor_name, Actor_id, Actor_birthdate, Director_name, Director_id, Director_birthdate, film_title, year of production, type (thriller, comedy, etc.). Create 10 collections with data relevant to the following questions. Write and execute MongoDB queries:
db.movies.insertMany([
  {
    actor_name: "John",
    actor_id: 1,
    actor_birthdate: "1980-01-01",
    director_name: "Ram",
    director_id: 1,
    director_birthdate: "1970-01-01",
    film_title: "Action Movie 2018",
    year_of_production: 2018,
    type: "Action",
  },
  {
    actor_name: "Elly",
    actor_id: 2,
    actor_birthdate: "1985-02-02",
    director_name: "Ram",
    director_id: 1,
    director_birthdate: "1970-01-01",
    film_title: "Drama Movie 2012",
    year_of_production: 2012,
    type: "Drama",
  },
  {
    actor_name: "John",
    actor_id: 1,
    actor_birthdate: "1980-01-01",
    director_name: "Ram",
    director_id: 1,
    director_birthdate: "1970-01-01",
    film_title: "Comedy Movie 2012",
    year_of_production: 2012,
    type: "Comedy",
  },
]);

// 1. List all the movies acted by John in the year 2018.
db.movies.find(
  { actor_name: "John", year_of_production: 2018 },
  { film_title: 1, _id: 0 }
);

// 2. List only the actor names and type of the movie directed by Ram.
db.movies.find({ director_name: "Ram" }, { actor_name: 1, type: 1, _id: 0 });

// 3. List all the movies acted by John and Elly in the year 2012.
db.movies.find(
  {
    $or: [{ actor_name: "John" }, { actor_name: "Elly" }],
    year_of_production: 2012,
  },
  { film_title: 1, _id: 0 }
);

// 4. List only the name and type of the movie where Ram has acted, sorted by movie names.
db.movies
  .find({ actor_name: "Ram" }, { film_title: 1, type: 1, _id: 0 })
  .sort({ film_title: 1 });
