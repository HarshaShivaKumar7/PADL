(* Suppose a movie_studio has several film crews. The crews might be designated by a
given studio as crew1, crew2, and so on. However, other studios might use the same
designations for crews, so the attribute crew_number is not a key for crews.
Movie_studio holds the information like name, branch and several locations. Each crew
holds information like sector, and strength.
a. Establish the database by normalising up to 3NF and considering all schema level
constraints.
b. Write SQL insertion query to insert few tuples to all the relations.
c. List all movies studios which are not used a single crews.
d. Retrieve the movie_studio which uses highest strength crew.
e. Write a before insert trigger to check maximum number of crews to any studio is
limited to 5.
f. Write a procedure retrieve all crews used by specific studio. *)

CREATE TABLE Location (
    location_id INT PRIMARY KEY,
    address VARCHAR(255) NOT NULL
);

CREATE TABLE Movie_Studio (
    studio_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    branch VARCHAR(255) NOT NULL
);

CREATE TABLE Movie_Studio_Location (
    studio_id INT,
    location_id INT,
    PRIMARY KEY (studio_id, location_id),
    FOREIGN KEY (studio_id) REFERENCES Movie_Studio(studio_id),
    FOREIGN KEY (location_id) REFERENCES Location(location_id)
);

CREATE TABLE Crew (
    crew_id INT PRIMARY KEY,
    crew_number VARCHAR(255) NOT NULL,
    sector VARCHAR(255) NOT NULL,
    strength INT NOT NULL,
    studio_id INT,
    FOREIGN KEY (studio_id) REFERENCES Movie_Studio(studio_id),
    UNIQUE (studio_id, crew_number) -- Ensuring unique crew_number within a studio
);


INSERT INTO Location (location_id, address) VALUES
(1, 'Los Angeles'),
(2, 'Hollywood'),
(3, 'Burbank');


INSERT INTO Movie_Studio (studio_id, name, branch) VALUES
(1, 'Paramount', 'Main'),
(2, 'Universal', 'West'),
(3, 'Warner Bros', 'East');


INSERT INTO Movie_Studio_Location (studio_id, location_id) VALUES
(1, 1),
(2, 2),
(3, 3);


INSERT INTO Crew (crew_id, crew_number, sector, strength, studio_id) VALUES
(1, 'crew1', 'Lighting', 10, 1),
(2, 'crew2', 'Sound', 15, 1),
(3, 'crew3', 'Catering', 8, 2);


SELECT ms.name
FROM Movie_Studio ms
LEFT JOIN Crew c ON ms.studio_id = c.studio_id
WHERE c.crew_id IS NULL;


SELECT ms.*
FROM Movie_Studio ms
JOIN Crew c ON ms.studio_id = c.studio_id
ORDER BY c.strength DESC
LIMIT 1;


CREATE TRIGGER check_max_crews
BEFORE INSERT ON Crew
FOR EACH ROW
BEGIN
    DECLARE crew_count INT;
    SELECT COUNT(*) INTO crew_count
    FROM Crew
    WHERE studio_id = NEW.studio_id;
    
    IF crew_count >= 5 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Maximum number of crews for this studio exceeded';
    END IF;
END;




(* The production company is organised into different studios. We store each studio’s name,
branch and location; every studio must own at least one movie. We store eachmovie’s title,
censor_number and year of production. star may act in any number of movies and we store
each actors name and address.
a. Establish the database by normalising up to 3NF and considering all schema level
constraints.
b. Write SQL insertion query to insert few tuples to all the relations.
c. List all the studios of the movie “xyz”.
d. List all the actors, acted in a movie “xyz”.
e. Write a procedure to list all movies produced during the specific year.
f. Write a deletion trigger, does not allow to deleting the current year movies*)


-- a. Establish the database by normalising up to 3NF and considering all schema level constraints.

CREATE TABLE Studios (
    studio_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    branch VARCHAR(100) NOT NULL,
    location VARCHAR(100) NOT NULL
);

CREATE TABLE CartoonSerials (
    serial_id INT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    censor_number VARCHAR(100) NOT NULL,
    year_of_production INT NOT NULL,
    studio_id INT,
    FOREIGN KEY (studio_id) REFERENCES Studios(studio_id)
);

CREATE TABLE Actors (
    actor_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL
);

CREATE TABLE VoiceRoles (
    actor_id INT,
    serial_id INT,
    PRIMARY KEY (actor_id, serial_id),
    FOREIGN KEY (actor_id) REFERENCES Actors(actor_id),
    FOREIGN KEY (serial_id) REFERENCES CartoonSerials(serial_id)
);

-- b. Write SQL insertion query to insert few tuples to all the relations.

INSERT INTO Studios (studio_id, name, branch, location) VALUES
(1, 'Studio One', 'Branch A', 'Location A'),
(2, 'Studio Two', 'Branch B', 'Location B');

INSERT INTO CartoonSerials (serial_id, title, censor_number, year_of_production, studio_id) VALUES
(1, 'Cartoon X', 'CN123', 2022, 1),
(2, 'Cartoon Y', 'CN124', 2023, 1),
(3, 'Cartoon Z', 'CN125', 2022, 2);

INSERT INTO Actors (actor_id, name, address) VALUES
(1, 'Actor A', 'Address A'),
(2, 'Actor B', 'Address B'),
(3, 'Actor C', 'Address C');

INSERT INTO VoiceRoles (actor_id, serial_id) VALUES
(1, 1),
(2, 1),
(3, 2),
(1, 3);

-- c. Find total number of actors who did voices in a cartoon-serial "xyz".

SELECT COUNT(DISTINCT actor_id) AS total_actors
FROM VoiceRoles VR
JOIN CartoonSerials CS ON VR.serial_id = CS.serial_id
WHERE CS.title = 'xyz';

-- d. Retrieve name of studio, location and cartoon-serials title in which star "abc" is voiced.

SELECT S.name AS studio_name, S.location, CS.title
FROM Studios S
JOIN CartoonSerials CS ON S.studio_id = CS.studio_id
JOIN VoiceRoles VR ON CS.serial_id = VR.serial_id
JOIN Actors A ON VR.actor_id = A.actor_id
WHERE A.name = 'abc';

-- e. Write a procedure to list all cartoon-serials produced during a specific year.

DELIMITER $$

CREATE PROCEDURE ListCartoonSerialsByYear(IN production_year INT)
BEGIN
    SELECT title
    FROM CartoonSerials
    WHERE year_of_production = production_year;
END $$

DELIMITER ;

-- f. Write a deletion trigger, does not allow to delete the current year cartoon-serials.

CREATE TRIGGER PreventCurrentYearCartoonDeletion
BEFORE DELETE ON CartoonSerials
FOR EACH ROW
BEGIN
    IF OLD.year_of_production = YEAR(CURDATE()) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete cartoon serials from the current year';
    END IF;
END;





(* The production company is organised into different studios. We store each studio’s name,
branch and location; a studio own any number of cartoon-serials. We store eachcartoonserials’s title, censor_number and year of production. star may do voices in any number of
cartoon-serials and we store each actors name and address.
a. Establish the database by normalising up to 3NF and considering all schema level
constraints.
b. Write SQL insertion query to insert few tuples to all the relations.
c. Find total no. of actors, do voiced in a cartoon-serials “xyz”.
d. Retrieve name of studio, location and cartoon-serials title in which star “abc’ is
voiced.
e. Write a procedure to list all cartoon-serials produced during the specific year.
f. Write a deletion trigger, does not allow to deleting the current year cartoon-serials *)




















