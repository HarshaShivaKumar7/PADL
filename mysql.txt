mySQL

Question 1
A. Suppose a movie_studio has several film crews. The crews might be designated by a given studio as crew1, crew 2, and so on. However, other studios might use the same designations for crews, so the attribute crew_number is not a key for crews. Movie_studio holds the information like name, branch and several locations. Each crew holds information like sector and strength.

-- Relational Schema
-- movie_studio (studio_id, name, branch, location)
-- crew (crew_id, studio_id, sector, strength)

-- List all movie studios which are not used a single crew.

SELECT name 
FROM movie_studio ms
WHERE NOT EXISTS (
    SELECT 1 
    FROM crew c 
    WHERE c.studio_id = ms.studio_id
);


-- Retrieve the movie studio which uses the highest strength crew.

SELECT ms.name 
FROM movie_studio ms
JOIN crew c ON ms.studio_id = c.studio_id
ORDER BY c.strength DESC
LIMIT 1;


-- Write a before insert trigger to check maximum number of crews to any studio is limited to 10.

CREATE TRIGGER before_insert_crew
BEFORE INSERT ON crew
FOR EACH ROW
BEGIN
    DECLARE crew_count INT;
    SELECT COUNT(*) INTO crew_count FROM crew WHERE studio_id = NEW.studio_id;
    IF crew_count >= 10 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Maximum number of crews for a studio is limited to 10';
    END IF;
END;


Question 2
A. The production company is organized into different studios. We store each studio’s name branch and location; every studio must own at least one movie. We store each movie’s title, sensor_number and year of production. Star may act in any number of movies and we store each actor's name and address.

-- studio (studio_id, name, branch, location)
-- movie (movie_id, studio_id, title, sensor_number, year_of_production)
-- star (star_id, name, address)
-- movie_star (movie_id, star_id)

-- List all the studios of the movie “Kantara”;

SELECT s.name
FROM studio s
JOIN movie m ON s.studio_id = m.studio_id
WHERE m.title = 'Kantara';


-- List all the actors acted in a movie ‘Kantara’;

SELECT st.name
FROM star st
JOIN movie_star ms ON st.star_id = ms.star_id
JOIN movie m ON ms.movie_id = m.movie_id
WHERE m.title = 'Kantara';


-- Write a deletion trigger that does not allow deleting current year movies.

CREATE TRIGGER before_delete_movie
BEFORE DELETE ON movie
FOR EACH ROW
BEGIN
    IF OLD.year_of_production = YEAR(CURDATE()) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot delete movies from the current year';
    END IF;
END;


Question 3
A. The production company is organized into different studios. We store each studio’s name branch and location; a studio own any number of Cartoon-serials. We store each Cartoon-Serial’s title, sensor_number and year of production. Star may do voices in any number of Cartoon-Serials and we store each actor's name and address.

-- Relational Schema
-- studio (studio_id, name, branch, location)
-- cartoon_serial (serial_id, studio_id, title, sensor_number, year_of_production)
-- star (star_id, name, address)
-- serial_star (serial_id, star_id)

-- Find the total number of actors who did voices in the Cartoon-Serial ‘Tom and Jerry’;

SELECT COUNT(DISTINCT st.star_id) AS total_actors
FROM star st
JOIN serial_star ss ON st.star_id = ss.star_id
JOIN cartoon_serial cs ON ss.serial_id = cs.serial_id
WHERE cs.title = 'Tom and Jerry';


-- Retrieve the name of the studio, location, and Cartoon-Serials title in which star “Richard Kind” is voiced.

SELECT s.name, s.location, cs.title
FROM studio s
JOIN cartoon_serial cs ON s.studio_id = cs.studio_id
JOIN serial_star ss ON cs.serial_id = ss.serial_id
JOIN star st ON ss.star_id = st.star_id
WHERE st.name = 'Richard Kind';


-- Write a deletion trigger that does not allow deleting current year Cartoon-Serials.

CREATE TRIGGER before_delete_cartoon_serial
BEFORE DELETE ON cartoon_serial
FOR EACH ROW
BEGIN
    IF OLD.year_of_production = YEAR(CURDATE()) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot delete Cartoon-Serials from the current year';
    END IF;
END;


Question 4
A. Car marketing company wants to keep track of marketed cars and their owner. Each car must be associated with a single owner and an owner may have any number of cars. We store car’s registration number, model & color and owner’s name, address & SSN. We also store the date of purchase of each car.

-- Relational Schema
-- owner (owner_id, name, address, SSN)
-- car (car_id, owner_id, registration_number, model, color, date_of_purchase)

-- Find a person who owns the highest number of cars.

SELECT o.name
FROM owner o
JOIN car c ON o.owner_id = c.owner_id
GROUP BY o.owner_id, o.name
ORDER BY COUNT(c.car_id) DESC
LIMIT 1;


-- Retrieve persons and cars information purchased on the day 03-03-2023.

SELECT o.name, c.registration_number, c.model, c.color
FROM owner o
JOIN car c ON o.owner_id = c.owner_id
WHERE c.date_of_purchase = '2023-03-03';


-- Write an insertion trigger to check the date of purchase must be less than the current date (must use the system date).

CREATE TRIGGER before_insert_car
BEFORE INSERT ON car
FOR EACH ROW
BEGIN
    IF NEW.date_of_purchase >= CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Date of purchase must be less than the current date';
    END IF;
END;


Question 5
A. Puppy pet shop wants to keep track of dogs and their owners. The person can buy a maximum of three pet dogs. We store the person’s name, SSN and address and the dog’s name, date of purchase and sex. The owner of the pet dogs will be identified by SSN since the dog’s names are not distinct.

-- person (person_id, name, SSN, address)
-- pet_dog (dog_id, person_id, name, date_of_purchase, sex)

-- List all pets owned by a person ‘Ramesh’.

SELECT pd.name
FROM pet_dog pd
JOIN person p ON pd.person_id = p.person_id
WHERE p.name = 'Ramesh';


-- List all persons who have not owned a single pet.

SELECT p.name
FROM person p
LEFT JOIN pet_dog pd ON p.person_id = pd.person_id
WHERE pd.dog_id IS NULL;


-- Write a trigger to check the constraint that a person can buy a maximum of three pet dogs.

CREATE TRIGGER before_insert_pet_dog
BEFORE INSERT ON pet_dog
FOR EACH ROW
BEGIN
    DECLARE dog_count INT;
    SELECT COUNT(*) INTO dog_count FROM pet_dog WHERE person_id = NEW.person_id;
    IF dog_count >= 3 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'A person can buy a maximum of three pet dogs';
    END IF;
END;

### Question 6
A. Education institute is managing the online course enrollment system. Students can enroll in a maximum of six courses of their choice and a maximum of 60 students can be enrolled in any course. We store student details like name, USN, semester and several addresses, and course details like unique title, unique id and credits.

-- student (student_id, name, USN, semester, address)
-- course (course_id, title, credits)
-- enrollment (student_id, course_id)

-- Find the number of students enrolled in the course ‘ADBMS’

SELECT COUNT(e.student_id) AS number_of_students
FROM enrollment e
JOIN course c ON e.course_id = c.course_id
WHERE c.title = 'ADBMS';


-- Retrieve student names that are enrolled in the AI course but not enrolled in IOT

SELECT s.name
FROM student s
JOIN enrollment e1 ON s.student_id = e1.student_id
JOIN course c1 ON e1.course_id = c1.course_id
WHERE c1.title = 'AI'
  AND s.student_id NOT IN (
      SELECT e2.student_id
      FROM enrollment e2
      JOIN course c2 ON e2.course_id = c2.course_id
      WHERE c2.title = 'IOT'
  );


-- Write a trigger to establish the constraint that the students can enroll in a maximum of six courses of their choice

CREATE TRIGGER before_insert_enrollment
BEFORE INSERT ON enrollment
FOR EACH ROW
BEGIN
    DECLARE course_count INT;
    SELECT COUNT(*) INTO course_count FROM enrollment WHERE student_id = NEW.student_id;
    IF course_count >= 6 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Students can enroll in a maximum of six courses';
    END IF;
END;


### Question 7
A. The Sapna Book shop wants to keep track of orders of the book. The book is composed of unique id, title, year of publication, single author and single publisher. Each order will be uniquely identified by order-id and may have any number of books. We keep track of the quantity of each book ordered. We store the following details for author and publisher.
AUTHOR: unique author-id, name, city, country
PUBLISHER: unique publisher-id, name, city, country.

-- Relational Schema
-- author (author_id, name, city, country)
-- publisher (publisher_id, name, city, country)
-- book (book_id, title, year_of_publication, author_id, publisher_id)
-- order (order_id, order_date)
-- order_item (order_id, book_id, quantity)

-- Find the author who has published the highest number of books

SELECT a.name
FROM author a
JOIN book b ON a.author_id = b.author_id
GROUP BY a.author_id, a.name
ORDER BY COUNT(b.book_id) DESC
LIMIT 1;


-- List the books published by a specific publisher during the year 2022

SELECT b.title
FROM book b
JOIN publisher p ON b.publisher_id = p.publisher_id
WHERE p.name = 'Specific Publisher' AND b.year_of_publication = 2022;


-- Write before insertion trigger to book to check the year of publication should allow the current year only

CREATE TRIGGER before_insert_book
BEFORE INSERT ON book
FOR EACH ROW
BEGIN
    IF NEW.year_of_publication <> YEAR(CURDATE()) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Year of publication should be the current year';
    END IF;
END;


### Question 8
A. The commercial bank wants to keep track of the customer’s account information. Each customer may have any number of accounts and accounts can be shared by any number of customers. The system will keep track of the date of the last transaction. We store the following details.
-- Account: unique account-number, type and balance
-- Customer: unique customer-id, name and several addresses composed of street, city and state

-- Relational Schema
-- account (account_number, type, balance, last_transaction_date)
-- customer (customer_id, name, address)
-- customer_account (customer_id, account_number)

-- Add 3% interest to the customer who have less than 1000 balances and 6% interest to remaining customers

UPDATE account
SET balance = CASE 
    WHEN balance < 1000 THEN balance * 1.03
    ELSE balance * 1.06
END;


-- List joint accounts involving more than three customers

SELECT account_number
FROM customer_account
GROUP BY account_number
HAVING COUNT(customer_id) > 3;


-- Write an insertion trigger to allow only the current date for the date of the last transaction field

CREATE TRIGGER before_insert_account
BEFORE INSERT ON account
FOR EACH ROW
BEGIN
    IF NEW.last_transaction_date <> CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The date of the last transaction must be the current date';
    END IF;
END;


### Question 9
A. Consider the Insurance database given below. The primary keys are underlined and the data types are specified.
-- PERSON (driver-id #: String, name: string, address: strong)
-- CAR (Regno: string, model: string, year: int)
-- ACCIDENT (report-number: int, accd-date: date, location: string)
-- OWNS (driver-id #: string, Regno: string)
-- PARTICIPATED (driver-id: string, Regno: string, report-number: int, damage_amount: int)

-- Create the above tables by properly specifying the primary keys and the foreign keys. Enter at least five tuples for each relation.

-- Create tables

CREATE TABLE PERSON (
    driver_id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(100),
    address VARCHAR(255)
);

CREATE TABLE CAR (
    Regno VARCHAR(50) PRIMARY KEY,
    model VARCHAR(50),
    year INT
);

CREATE TABLE ACCIDENT (
    report_number INT PRIMARY KEY,
    accd_date DATE,
    location VARCHAR(100)
);

CREATE TABLE OWNS (
    driver_id VARCHAR(50),
    Regno VARCHAR(50),
    PRIMARY KEY (driver_id, Regno),
    FOREIGN KEY (driver_id) REFERENCES PERSON(driver_id),
    FOREIGN KEY (Regno) REFERENCES CAR(Regno)
);

CREATE TABLE PARTICIPATED (
    driver_id VARCHAR(50),
    Regno VARCHAR(50),
    report_number INT,
    damage_amount INT,
    PRIMARY KEY (driver_id, Regno, report_number),
    FOREIGN KEY (driver_id) REFERENCES PERSON(driver_id),
    FOREIGN KEY (Regno) REFERENCES CAR(Regno),
    FOREIGN KEY (report_number) REFERENCES ACCIDENT(report_number)
);

-- Insert at least five tuples for each relation
-- Insert statements should be written here according to the data types


-- Update the damage amount for the car with a specific Regno in the accident with report number 12 to 25000

UPDATE PARTICIPATED
SET damage_amount = 25000
WHERE Regno = 'specific_regno' AND report_number = 12;


-- Find the total number of people who owned cars that were involved in accidents in 2008

SELECT COUNT(DISTINCT o.driver_id) AS total_people
FROM OWNS o
JOIN PARTICIPATED p ON o.Regno = p.Regno
JOIN ACCIDENT a ON p.report_number = a.report_number
WHERE YEAR(a.accd_date) = 2008;


-- Find the number of accidents in which cars belonging to a specific model were involved

SELECT COUNT(DISTINCT p.report_number) AS total_accidents
FROM PARTICIPATED p
JOIN CAR c ON p.Regno = c.Regno
WHERE c.model = 'specific_model';


-- Write before insert trigger to if the accident date is on or before the current date

CREATE TRIGGER before_insert_accident
BEFORE INSERT ON ACCIDENT
FOR EACH ROW
BEGIN
    IF NEW.accd_date > CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Accident date must be on or before the current date';
    END IF;
END;


### Question 10
A. Consider the following shipment schema. The primary keys are underlined. Assume relevant data types for attributes.
-- CUSTOMER (cust#, cname, city)
-- ORDER (order#, odate, cust#, ord-Amt)
-- ORDER-ITEM (order#, Item#, qty)
-- ITEM (item#, unit price)
-- SHIPMENT (order#, ship-date)

-- Create the above tables in SQL. Specify primary and foreign keys properly. Enter at least 5 tuples in each table with relevant data.

-- Create tables

CREATE TABLE CUSTOMER (
    cust# INT PRIMARY KEY,
    cname VARCHAR(100),
    city VARCHAR(50)
);

CREATE TABLE `ORDER` (
    order# INT PRIMARY KEY,
    odate DATE,
    cust# INT,
    ord_Amt DECIMAL(10, 2),
    FOREIGN KEY (cust#) REFERENCES CUSTOMER(cust#)
);

CREATE TABLE ORDER_ITEM (
    order# INT,
    Item# INT,
    qty INT,
    PRIMARY KEY (order#, Item#),
    FOREIGN KEY (order#) REFERENCES `ORDER`(order#),
    FOREIGN KEY (Item#) REFERENCES ITEM(Item#)
);

CREATE TABLE ITEM (
    Item# INT PRIMARY KEY,
    unit_price DECIMAL(10, 2)
);

CREATE TABLE SHIPMENT (
    order# INT,
    ship_date DATE,
    PRIMARY KEY (order#),
    FOREIGN KEY (order#) REFERENCES `ORDER`(order#)
);

-- Insert at least five tuples in each table with relevant data
-- Insert statements should be written here according to the data types


-- List the name of the customer, no. of orders placed by each customer residing in Bangalore city

SELECT c.cname, COUNT(o.order#) AS num_orders
FROM CUSTOMER c
JOIN `ORDER` o ON c.cust# = o.cust#
WHERE c.city = 'Bangalore'
GROUP BY c.cname;


-- List the order# for orders that were shipped from all the warehouses that the company has in a specific city

SELECT s.order#
FROM SHIPMENT s
JOIN `ORDER` o ON s.order# = o.order#
JOIN CUSTOMER c ON o.cust# = c.cust#
WHERE c.city = 'specific_city';


-- List the customer names who have not ordered item no. 10

SELECT cname
FROM CUSTOMER
WHERE custno NOT IN (
    SELECT custno
    FROM ORDERS o
    JOIN ORDER_ITEM oi ON o.orderno = oi.orderno
    WHERE oi.itemno = 10
);



-- Write a deletion trigger, set NULL on deletion of an ITEM

CREATE TRIGGER before_delete_item
BEFORE DELETE ON ITEM
FOR EACH ROW
BEGIN
    UPDATE ORDER_ITEM
    SET Item# = NULL
    WHERE Item# = OLD.Item#;
END;
